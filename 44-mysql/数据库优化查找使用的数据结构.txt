"页"是InnoDB管理存储空间的基本单位，一个页一般是16KB

InnoDB为不同的目的设计了多种不同类型的页：比如存放表空间头部信息的页，存放Change Buffer的页，存放Inode的页，存放undo日志的页等

我们后面讨论的是存放记录数据的页，官方成为索引页，根据功能也可以成为数据页。


一个16KB的数据页，根据不同功能分为多个部分，大致分为7个部分 

1. File Header             文件头部                        38字节        存放页的通用信息

2. Page Header             页面头部                        56字节        存放数据页专有的一些信息

3. Infimum + Supremum      页面中的最小记录和最大记录      26字节         两个虚拟记录

4. User Records            用户记录                         不确定        用户存储的记录内容，即数据

5. Free Space              空闲空间                         不确定         尚未使用的空间

6. Page Directory          页目录                           不确定        页中某些记录的相对位置

7. File Trailer            文件尾部                         8字节          校验页是否完整




最开始                   User Records 0                          Free Space XXXX

随着后续记录增多         User Records 使用空间增加               Free Space 使用空间减少

最后                     User Records XXXX                       Free Space 0


创建一个表

CREATE TABLE page_demo (
    c1 INT,
	c2 INT,
	c3 VARCHAR(1000)
	PRIMARY KEY(c1)  ---> 将c1设为主键，即索引
 ) CHARSET=acsii ROW_FORMAT=COMPACT;  ---> 指定行格式为COMPACT
 
 COMPACT行格式如下
 
             记录的额外信息                          |            记录的真实数据
 
 变长字段长度列表 | NUll值列表 | 记录头信息 | c1列值 | trx_id列的值（隐藏列） | roll_pointer列的值（隐藏列） | c2列的值 | c3列的值
 


记录头信息详解：

预留位1(1B) | 预留位2(1B) | deleted_flag(1B) | min_rec_flag(1) | n_owned(4B) | heap_no(13B) | record_type(3B) | next_record(16B) |

解读
delted_flag：标记当前记录是否被删除，0表示没删除，1表示删除
             被删除记录之所以不从磁盘上移除，因为在移除之后，还需要在磁盘上重新排列其他记录，会造成性能消耗
			 所有被删除的记录会组成一个垃圾链表，记录在这个链表中占用的空间称为可重用空间。之后若有新记录插入到表中，可能会覆盖掉被删除记录所占用的空间

min_rec_flag：B+树每层非叶子节点中的最小目录项记录都会将flag置1，否则位0

o_owned：后续详细讲解

heap_no: 记录一条条无缝排列的结构称为堆，为了方便管理，会记录每条记录在堆中的相对位置，比如第一条记录heap_no为2，第二条记录heap_no为3...


补充：由innodb默认创建的记录：Infimum记录，记录头信息为： 696E66696D756D00 ---- 一个页面中的最小记录，heap_no值为0
                              Supremum记录，记录头信息为：73757072656D756D ---- 一个页面中的最大记录，heap_no值为1
							  
注意：heap_no值分配后就不会改动


record_type: 表示当前记录类型，
								0：普通记录，
								1：B+树非叶子节点的目录项记录
								2：Infimum记录
								3：Supremum记录
								
next_record: 当前记录的真实数据到下一条记录的真实数据的距离，即链表，可以通过该属性值找到下一条记录的位置，
             注意：这里记录的顺序不是插入顺序，而是主键大小的顺序
			 
		     重点：规定Infimum记录的下一条记录就是本页的最小用户记录
			           本页主键值最大的用户记录的下一条记录一定是Supremum记录
					   
					   
使用next_record值将数据页中的每条记录形成一个单项链表  ： Infimum记录 ----> 最小记录 ---> 第二小记录 ----> ... ---> 最大记录 ---> Supremum记录
Supremum记录的next_record值为0，意味着Supermum记录后面没有下一条记录

##record指向的位置是 记录头信息 | 真实数据 之间的位置，这个位置设计的很好，向左就是记录头信息，向右就是真实数据




页和页之间通过File Header字段中的FILE_PAGE_PREV和FILE_PAGE_NEXT这两个字段，建立起一个双向链表，将每个数据页都串联起来（并不是所有类型的页都有上页和下页）



Page Directory ：

将所有正常的记录（包括Infimum记录和Supremum记录，但不包括已经移除到垃圾链表的记录）划分为几组

每组最后一条记录（也就是组内最大的记录）上面的 n_owned属性表示该组内有多少条记录

将每个组中最后一条记录在页面中的地址偏移量，（就是该记录的真实数据与页面中第0个字节之间的距离）单独提取出来，放在Page Directory的槽中，每个槽占用2字节（1个页16KB，即16384字节，2字节可以表示0=65535，足够）

页目录有多个槽组成

分组规则：Infimum记录单独分一个组，这个组只有1条记录，就是Infimum记录, Supremum记录所在分组拥有记录1-8条之间，剩下的分组记录在4~8条之间


总结：综上所述在一个数据页中查找指定主键的记录时，分为两步：
1. 通过二分法确定该记录所在分组对应的槽，然后找到该槽所在分组主键最小的那条记录
2. 通过记录next_record属性遍历该槽所在的组中的各项记录


